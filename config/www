#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../server');
var http = require('http');
var https = require('https');
var fs = require('fs');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(require("../config/main").port);
app.set('port', port);

//This line is from the Node.js HTTPS documentation.
var options = {
  key: fs.readFileSync('/etc/letsencrypt/live/labank.cc/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/labank.cc/cert.pem')
};

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

if(process.env.INIT_CWD === '/var/app/LABankapi') { //https over http
  server = https.createServer(options, app);
}
var io = require('socket.io')(server);

/**
 * Create a socket.
 */

 io.on("connection", socket => {
   console.log("New client connected");
   socket.on("engines", () => {
     getApiAndEmit(socket); // notify client when engines has change
   });
   socket.on("disconnect", () => {
     console.log("Client disconnected");
   });
 });

function getApiAndEmit(socket){
   try {
     http.get(
       "http://localhost:8000/engines/syncAll", (response) => {
         var body = '';

          response.on('data', function(d) {
              body += d;
          });

          response.on('end', function() {
            io.emit("FromAPI", JSON.parse(body));
          });
       }
     );
   } catch (error) {
     console.error(`Error: ${error.code}`);
   }
 };

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP and HTTPS server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
}
